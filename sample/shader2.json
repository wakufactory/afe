{"version":1,"settings":{"name":"shader2"},"scenes":["<a-assets>\n  \t<img id=\"floortex\" src=\"assets/tex1024.png\">\n</a-assets>\n<!--floor-->\n<a-plane position=\"0 -0.001 0\" rotation=\"-90 0 0\" width=\"200\" height=\"200\" color=\"#888\" material=\"shader:flat;src: #floortex;repeat:20 20;\"></a-plane>\n<!--sky-->\n<a-sky  material=\"shader:flat;color:#66a\" radius=\"100\" segments-height=\"6\" segments-width=\"12\"></a-sky>\n\n<!--axis-->\n<a-entity  line = \"start:0 0 0 ; end:200 0 0; color:#f00\"\n           line__2 = \"start:0 0 0 ; end:0 200 0; color:#0f0\"\n\t       line__3 = \"start:0 0 0 ; end:0 0 200; color:#00f\" ></a-entity>\n\n<!--sample objects-->\n<a-entity id=base  position=\"0 1 0\" \n animation=\"property:rotation; from:0 0 0 ; to:0 0 0; dur:5000; easing:linear; dir:; loop:true\" >\n\t<a-entity geometry=\"primitive:plane;width:2;height:2;segmentsHeight:100;segmentsWidth:100;\"  \n\t\tmaterial=\"shader:myshader;timestamp:0.9;side:double;src:#floortex\" \n\t\trotation=\"-90 0 0\" position=\"0 0 0\" color=\"#f4f\" ></a-entity>\n</a-entity>\n\n<!--lights-->\n<a-entity light=\"type: ambient; color: #888\"></a-entity>\n<a-entity light=\"type: directional; color: #FFF; intensity: 0.6; castShadow:false;\" position=\"-0.5 1 1\" shadow ></a-entity>\n\n<!--camera-->\n<a-entity id=\"camrig\"  position=\"0 1.5 2\" vrheight padmoved> \n\t<a-entity id=\"camera\" camera  look-controls wasd-controls></a-entity>\n\t<!--vr controller-->\n\t<a-entity oculus-touch-controls=\"hand: left; model:false\"  exitvr></a-entity>\n\t<a-entity oculus-touch-controls=\"hand: right; model:false\" padmove=\"gripud:true\" exitvr></a-entity>\n</a-entity>"],"components":"//scene init component \nPOXA.registerComponent('sceneinit', {\n\tschema: {\n\t\tquery:{type:\"array\"}\n\t},\n\tinit:function() {\n\t\tPOXA.log(\"start\")\n\t\t// init code here\n\t},\n\ttick:function(time,dur) {\n\t\t// called each frame \n\t}\n})\n\n//sample component\nPOXA.registerShader('myshader', {\n  schema: {\n    color: {type:'color', is:'uniform', default:'red'},\n    opacity: {type:'number', is:'uniform', default:1.0},\n    timestamp: {type:'time', is:'uniform', default:0},\n  },\n  raw: false,\n  vertexShader:`\nvarying vec2 vuv ;\nvarying vec3 vpos ;\nuniform float timestamp;\n\nconst float PI = 3.141592654 ;\nvoid main() {\n  vuv = uv;\n  vec3 tpos = position ;\n  float vt = timestamp/2000.;\n  tpos.z += cos(PI*(vuv.x-0.5+vt)*3.)*cos(PI*(vuv.y-0.5+vt*0.5)*3.)*0.5;\n  vpos = (modelMatrix * vec4( tpos,1.0)).xyz ;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( tpos, 1.0 );\n}\n`,\n  fragmentShader: `\n  precision highp float;\n  varying vec2 vuv ;\n  varying vec3 vpos ;\n  uniform vec3 color;\n  uniform float opacity;\n  uniform float timestamp;\n\n  void main () {\n  \tvec3 lvec = normalize(vec3(0.5,2.,1.));\n  \tvec3 eyevec = normalize(cameraPosition-vpos) ;\n    vec3 nx = dFdx(vpos);\n    vec3 ny = dFdy(vpos);\n    vec3 n = normalize(cross(normalize(nx), normalize(ny)));\n    float l = dot(n,lvec)+0.2 ;\n    gl_FragColor = vec4(color*l, opacity);\n  }\n`\n})"}